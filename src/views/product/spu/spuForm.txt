自己写的代码写一半不想写了数据太多了，太乱了脑壳疼



<template>
  <div>
    <el-form label-width="100px">
    <el-form-item label="spu名称">
        <el-input palceholder="请您输入SPU名称" v-model="SpuParams.spuName"></el-input>
    </el-form-item>
    <el-form-item label="SPU品牌">
        <el-select v-model="SpuParams.tmId">
            <el-option v-for="item in AllTradeMark" :ket="item.id" :label="item.tmName" :value="item.id"></el-option>
        </el-select>
    </el-form-item>
    <el-form-item label="SPU描述">
        <el-input palceholder="请您输入SPU名称" v-model="SpuParams.description"></el-input>
    </el-form-item>   
    <el-form-item label="SPU照片">
      <!-- v-model:fileList->展示默认图片
            action：上传图片的接口地址
            list-type: 文件列表类型
      -->
        <el-upload
          v-model:file-list="imgList"
          action="/api/admin/product/fileUpload"
          list-type="picture-card"
          :on-preview="handlePictureCardPreview"
          :on-remove="handleRemove"
          :beford-upload="handlerUpload"
        >
          <el-icon><Plus /></el-icon>
        </el-upload>
    
        <el-dialog v-model="dialogVisible">
          <img w-full :src="dialogImageUrl" alt="Preview Image" style="width: 100%;height: 100%;"/>
        </el-dialog>
    </el-form-item>
    <el-form-item label="SPU销售属性" >
        <el-select v-model="saleAttrIdAndValueName" :placeholder="unSelectSaleAttr.length?`还未选择${unSelectSaleAttr.length}个`:'无'" style="width: 230px;">
            <el-option :value="`${item.id}:${item.name}`" v-for="item in unSelectSaleAttr" :key="item.id" :label="item.name"></el-option>
        </el-select>
        <el-button @click="addSaleAttr" :disabled="saleAttrIdAndValueName?false:true" style="margin-left: 10px;" type="primary" size="default" icon="Plus">添加属性</el-button>
        <el-table border style="margin:10px 0px;" :data="saleAttr">
            <el-table-column label="序号" type="index" align="center" width="80px"></el-table-column>
            <el-table-column label="销售属性名字" width="120px" prop="saleAttrName"></el-table-column>
            <el-table-column label="销售属性值" prop="">
              <!-- row:即为当前SPU已有的显销售属性对象 -->
              <template #="{row}">
                <el-tag style="margin: 0px 5px;" v-for="tag in row.spuSaleAttrValueList" :key="tag.id" closable :type="tag.type">
                  {{ tag.saleAttrValueName }}
                </el-tag>
                <el-button type="primary" size="small" icon="Plus"></el-button>
              </template>
            </el-table-column>
            <el-table-column label="操作" width="120px">
              <template #="{$index}">
                <el-button type="primary" size="small" icon="Delete" @click="saleAttr.splice($index,1)"></el-button>
              </template>
                
            </el-table-column>
        </el-table>
    </el-form-item>
    <el-form-item>
        <el-button type="primary" size="default">保存</el-button>
        <el-button type="primary" size="default" @click="cancel">取消</el-button>
    </el-form-item>
    </el-form>
  </div>
  
</template>

<script setup lang="ts"> 
import {ref,computed} from 'vue'
import { reqAllTradeMark,reqSpuImageList,reqSpuHasSaleAttr,reqAllSaleAttr } from '@/api/product/spu'
import type{Trademark,SpuImg,SaleAttr,HasSaleAttr,SpuData,AllTradeMark,SpuHasImg,SaleAttrResponseData,HasSaleAttrResponseData} from '@/api/product/spu/type'
import { ElMessage } from 'element-plus'
let $emit=defineEmits(['changeScene'])
const cancel=()=>{
    $emit('changeScene',1)
}
//存储已有的SPU这些数据
let AllTradeMark=ref<Trademark[]>([])
//存储商品图片
let imgList=ref<SpuImg[]>([])
//已有的SPU销售属性
let saleAttr=ref<SaleAttr[]>([])
//全部的销售属性
let allSaleAttr=ref<HasSaleAttr[]>([])
//存储已有的SPU对象
let SpuParams=ref<SpuData>({
    category3Id:"",
    spuName: "",
    tmId:'',
    description:"",
    spuImageList: [],
    spuSaleAttrList: []
})
//将来收集还未选择的销售属性的ID与属性值的名字
let saleAttrIdAndValueName=ref('')
//子组件书写一个方法
const initHasSpuData=async(spu:SpuData)=>{
  //存储已有的SPU对象，将来在模板中展示
  SpuParams.value=spu
  //spu：即为父组件传递过来的已有的SPU对象【不完整】
  //获取全部品牌的数据
  let result:AllTradeMark = await reqAllTradeMark()
  //获取某一个品牌旗下全部售卖商品的图片
  let result1:SpuHasImg = await reqSpuImageList((spu.id as number))
  //获取已有的SPU销售属性的数据
  let result2:SaleAttrResponseData = await reqSpuHasSaleAttr((spu.id as number))
  //获取整个项目全部SPU的销售属性
  let result3:HasSaleAttrResponseData = await reqAllSaleAttr()
  console.log(result)
  console.log(result1)
  console.log(result2)
  console.log(result3)
  //存储全部品牌的数据
  AllTradeMark.value= result.data
  //SPU对应商品图片
  imgList.value=result1.data.map(item=>{
    return {
      name:item.imgName,
      url:item.imgUrl
    }
  })
  //存储已有的SPU的销售属性
  saleAttr.value=result2.data
  //存储全部的销售属性
  allSaleAttr.value=result3.data

}
//控制对话框的显示与隐藏
let dialogVisible=ref(false)
//存储预览图片的地址
let dialogImageUrl=ref('')
//照片墙点击预览按钮的时候触发的钩子
const handlePictureCardPreview=(file:any)=>{
  //对话框弹出来
  dialogVisible.value=true
  dialogImageUrl.value=file.url
}
//照片墙删除文件的钩子
const handleRemove=()=>{

}
//照片墙上传成功之前的钩子约束文件的大小与类型
const handlerUpload = (file:any)=>{
  if(file.type=='image/png'||file.type=='image/jpeg'||file.type=='image/gif'){
    if(file.size/1024/1024<3){
      return true
    }else{
      ElMessage({
        type:'error',
        message:'上传文件务必小于3M'
      })
      return false
    }
  }else{
      ElMessage({
        type:'error',
        message:'上传文件务必PNG|JPG|GIF'
      })
      return false
  }
}
//计算出当前SPU还未拥有的销售属性
let unSelectSaleAttr=computed(()=>{
  //全部销售属性：颜色、版本、尺码
  //已有的销售属性：颜色、版本
  let unSelectArr=allSaleAttr.value.filter(item=>{
    return saleAttr.value.every(item1=>{
      return item.name!=item1.saleAttrName
    })
  })
  return unSelectArr
})
//添加销售属性的方法
const addSaleAttr=()=>{

}
defineExpose({initHasSpuData})
</script>

<style scoped lang="scss">

</style>